.TH "pip_spawn_from_func" 3 "Mon May 23 2022" "Version 2.4.1" "Process-in-Process" \" -*- nroff -*-
.ad l
.nh
.SH NAME
pip_spawn_from_func \- pip_spawn_from_func
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBpip_spawn_from_func\fP (pip_spawn_program_t *progp, char *prog, char *funcname, void *arg, char **envv, void *aux)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Function Documentation"
.PP 
.SS "void pip_spawn_from_func (pip_spawn_program_t * progp, char * prog, char * funcname, void * arg, char ** envv, void * aux)"

.PP
\fBDescription\fP
.RS 4
This function sets the required information to invoke a program, starting from the \fCmain()\fP function\&. The function should have the function prototype as shown below; 
.PP
.nf
int start_func( void *arg )

.fi
.PP
 This start function must be globally defined in the program\&.\&. The returned integer of the start function will be treated in the same way as the \fCmain\fP function\&. This implies that the \fCpip_wait\fP function family called from the PiP root can retrieve the return code\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIprogp\fP Pointer to the \fCpip_spawn_program_t\fP structure in which the program invokation information will be set 
.br
\fIprog\fP Path to the executiable file\&. 
.br
\fIfuncname\fP Function name to be started 
.br
\fIarg\fP Argument which will be passed to the start function 
.br
\fIenvv\fP Environment variables\&. If this is \fCNULL\fP, then the \fCenviron\fP variable is used for the spawning PiP task\&. 
.br
\fIaux\fP Auxiliary data to be associated with the created PiP task
.RE
.PP
\fBSee also\fP
.RS 4
\fBpip_task_spawn\fP 
.PP
\fBpip_spawn_from_main\fP
.RE
.PP
\fBAuthor\fP
.RS 4
Atsushi Hori 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Process-in-Process from the source code\&.
