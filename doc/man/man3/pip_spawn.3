.TH "pip_spawn" 3 "Thu May 19 2022" "Version 2.4.1" "Process-in-Process" \" -*- nroff -*-
.ad l
.nh
.SH NAME
pip_spawn \- pip_spawn\&.
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBpip_spawn\fP (char *filename, char **argv, char **envv, int coreno, int *pipidp, pip_spawnhook_t before, pip_spawnhook_t after, void *hookarg)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Function Documentation"
.PP 
.SS "int pip_spawn (char * filename, char ** argv, char ** envv, int coreno, int * pipidp, pip_spawnhook_t before, pip_spawnhook_t after, void * hookarg)"

.PP
\fBDescription\fP
.RS 4
Another function to spawn a PiP task\&. This function was introdcued from the beginning of PiP release and \fCpip_task_spawn\fP is the newer and more flexible one\&. Refer to \fCpip_task_spawn\fP for more details\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP The executable to run as a PiP task 
.br
\fIargv\fP Argument(s) for the spawned PiP task 
.br
\fIenvv\fP Environment variables for the spawned PiP task 
.br
\fIcoreno\fP CPU core number for the PiP task to be bound to\&. By default, \fCcoreno\fP is set to zero, for example, then the calling task will be bound to the first core available\&. This is in mind that the available core numbers are not contiguous\&. To specify an absolute core number, \fCcoreno\fP must be bitwise-ORed with \fCPIP_CPUCORE_ABS\fP\&. If \fCPIP_CPUCORE_ASIS\fP is specified, then the core binding will not take place\&. 
.br
\fIpipidp\fP Specify PiP ID of the spawned PiP task\&. If \fCPIP_PIPID_ANY\fP is specified, then the PiP ID of the spawned PiP task is up to the PiP library and the assigned PiP ID will be returned\&. 
.br
\fIbefore\fP Just before the executing of the spawned PiP task, this function is called so that file descriptors inherited from the PiP root, for example, can deal with\&. This is only effective with the PiP process mode\&. This function is called with the argument \fIhookarg\fP described below\&. 
.br
\fIafter\fP This function is called when the PiP task terminates for the cleanup purpose\&. This function is called with the argument \fIhookarg\fP described below\&. 
.br
\fIhookarg\fP The argument for the \fIbefore\fP and \fIafter\fP function call\&.
.RE
.PP
\fBReturns\fP
.RS 4
Return 0 on success\&. Return an error code on error\&. 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIEPERM\fP PiP library is not yet initialized, or PiP task tries to spawn child task 
.br
\fIEINVAL\fP \fCprogp\fP is \fCNULL\fP, \fCopts\fP is invalid and/or unacceptable, the value off \fCpipidp\fP is invalid, or the coreno is larger than or equal to \fCPIP_CPUCORE_CORENO_MAX\fP\&. 
.br
\fIEBUSY\fP specified PiP ID is alredy occupied 
.br
\fIENOMEM\fP not enough memory 
.br
\fIENXIO\fP \fCdlmopen\fP failss
.RE
.PP
\fBBugs\fP
.RS 4
In theory, there is no reason to restrict for a PiP task to spawn another PiP task\&. However, the current glibc implementation does not allow to do so\&. 
.RE
.PP
\fB\fP
.RS 4
If the root process is multithreaded, only the main thread can call this function\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBpip_task_spawn\fP 
.PP
\fBpip_spawn_from_main\fP 
.PP
\fBpip_spawn_from_func\fP 
.PP
\fBpip_spawn_hook\fP 
.PP
\fBpip_task_spawn\fP
.RE
.PP
\fBAuthor\fP
.RS 4
Atsushi Hori 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Process-in-Process from the source code\&.
